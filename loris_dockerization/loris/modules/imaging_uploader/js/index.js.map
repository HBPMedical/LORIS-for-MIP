{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"React\"","webpack:///./node_modules/prop-types/index.js","webpack:///./jsx/FilterForm.js","webpack:///./node_modules/prop-types/factoryWithThrowingShims.js","webpack:///./jsx/ProgressBar.js","webpack:///./node_modules/prop-types/lib/ReactPropTypesSecret.js","webpack:///./jsx/Loader.js","webpack:///./jsx/Tabs.js","webpack:///./jsx/Panel.js","webpack:///./modules/imaging_uploader/jsx/index.js","webpack:///./modules/imaging_uploader/jsx/ImagingUploader.js","webpack:///./modules/imaging_uploader/jsx/LogPanel.js","webpack:///./modules/imaging_uploader/jsx/UploadForm.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","React","throwOnDirectAccess","isValidElement","REACT_ELEMENT_TYPE","_react","_propTypes","_Panel","FilterForm","props","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","clearFilter","getFormChildren","setFilter","onElementUpdate","queryString","QueryString","filter","filterKey","exactMatch","onUpdate","Module","formChildren","child","type","onUserInput","callbackFunc","callbackName","elementName","displayName","queryFieldName","filterValue","_react2","default","cloneElement","JSON","fieldName","fieldValue","_typeof","formElements","createElement","_Panel2","id","height","title","FormElement","Component","console","PropTypes","isRequired","string","func","ReactPropTypesSecret","emptyFunction","shim","propName","componentName","location","propFullName","secret","err","Error","getShim","ReactPropTypes","array","bool","number","symbol","any","arrayOf","element","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","ProgressBar","progressStyle","display","backgroundColor","position","labelStyle","top","left","zIndex","width","color","textAlign","lineHeight","fontWeight","className","style","role","aria-valuemin","aria-valuemax","aria-valuenow","Loader","parseInt","size","Tabs","hash","window","activeTab","updateURL","defaultTab","tabs","length","state","handleClick","getTabs","getTabPanes","tabId","e","setState","onTabChange","scrollDistance","$","scrollTop","map","tab","tabClass","href","tabID","data-toggle","onClick","label","tabPanes","Children","children","tabStyle","marginLeft","marginBottom","VerticalTabs","_this2","TabPane","classList","TabId","Title","Panel","collapsed","initCollapsed","panelClass","toggleCollapsed","glyphClass","panelHeading","data-target","cursor","_ImagingUploader","imagingUploader","_ImagingUploader2","DataURL","loris","ReactDOM","document","_FilterForm","_Tabs","_Loader","_LogPanel","_UploadForm","ImagingUploader","isLoaded","setFilterRef","fetchData","updateFilter","resetFilters","formatColumn","method","dataType","success","data","error","_error","column","cell","rowData","rowHeaders","row","header","index","cellStyle","whiteSpace","created","inserted","url","SessionID","_url","violatedScans","numViolatedScans","patientName","PatientName","openViolatedScans","_Loader2","tabList","_FilterForm2","ref","TextboxElement","form","candID","pSCID","SelectElement","visitLabel","ButtonElement","_LogPanel2","StaticDataTable","Data","Headers","getFormattedCell","Filter","hiddenHeaders","_UploadForm2","mriList","maxUploadSize","imagingUploaderAutoLaunch","LogPanel","logText","logType","initHelper","onLogTypeChange","setServerPolling","monitorProgress","uploadProgress","UploadProgress","event","getUploadRow","summary","uploadId","getUploadId","getProgressText","PIPELINE_STATUS_RUNNING","poll","getSummaryInterval","setInterval","dotUpdateInterval","animatedCharInterval","clearInterval","logTypes","detailed","options","emptyOption","TextareaElement","disabled","rows","_ProgressBar","UploadForm","formData","hasError","errorMessage","onFormChange","getDisabledStatus","submitForm","uploadFile","IsPhantom","field","phantomScans","mriFile","fileName","pcv","properName","RegExp","properExt","swal","text","confirmButtonText","fieldMsg","undefined","fileNameParts","visitLabelOffset","fileNameRemains","_errorMessage","_hasError","find","showCancelButton","cancelButtonText","isConfirm","overwriteFile","formObj","FormData","cache","contentType","processData","xhr","XMLHttpRequest","evt","lengthComputable","percentage","Math","total","textStatus","errorThrown","messageToPrint","errors","btnClass","notes","fileUpload","required","FileElement","StaticElement","_ProgressBar2","buttonClass"],"mappings":"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","file":"./modules/imaging_uploader/js/index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 75);\n","module.exports = React;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&\n    Symbol.for &&\n    Symbol.for('react.element')) ||\n    0xeac7;\n\n  var isValidElement = function(object) {\n    return typeof object === 'object' &&\n      object !== null &&\n      object.$$typeof === REACT_ELEMENT_TYPE;\n  };\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * This file contains React component for FilterForm\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport Panel from 'Panel';\n\n/**\n * FilterForm component.\n * A wrapper for form elements inside a selection filter.\n *\n * Adds necessary filter callbacks to all children and passes them to FormElement\n * for proper rendering.\n *\n * Keeps track of filter object and sends it to parent on every update.\n *\n * //HACK/NOTE: Loris has special behaviour for `candID` attribute in the query string,\n * making it impossible to use it for selection filters. This components renames\n * all `candID` fields to `candidateID` automatically before appending them to URL.\n *\n */\nclass FilterForm extends Component {\n  constructor(props) {\n    super(props);\n\n    // Bind component instance to custom methods\n    this.clearFilter = this.clearFilter.bind(this);\n    this.getFormChildren = this.getFormChildren.bind(this);\n    this.setFilter = this.setFilter.bind(this);\n    this.onElementUpdate = this.onElementUpdate.bind(this);\n\n    // Keeps track of querystring values\n    // Saved as class variable instead of keeping in state\n    this.queryString = QueryString.get();\n  }\n\n  componentDidMount() {\n    let filter = {};\n    let queryString = this.queryString;\n\n    // Initiaze filter using querystring value\n    Object.keys(queryString).forEach(function(key) {\n      let filterKey = (key === 'candidateID') ? 'candID' : key;\n      filter[filterKey] = {\n        value: queryString[key],\n        exactMatch: false,\n      };\n    });\n\n    // Update parent component\n    this.props.onUpdate(filter);\n  }\n\n  /**\n   * Clear the filter object, querystring and input fields\n   */\n  clearFilter() {\n    this.queryString = QueryString.clear(this.props.Module);\n    this.props.onUpdate({});\n  }\n\n  /**\n   * Iterates through FilterForm children, sets necessary callback functions\n   * and initializes filterTable\n   *\n   * @return {Array} formChildren - array of children with necessary props\n   */\n  getFormChildren() {\n    let formChildren = [];\n    React.Children.forEach(this.props.children, function(child, key) {\n      // If child is a React component (i.e not a simple DOM element)\n      if (React.isValidElement(child) &&\n        typeof child.type === 'function' &&\n        child.props.onUserInput\n      ) {\n        let callbackFunc = child.props.onUserInput;\n        let callbackName = callbackFunc.name;\n        let elementName = child.type.displayName;\n        let queryFieldName = (child.props.name === 'candID') ? 'candidateID' : child.props.name;\n        let filterValue = this.queryString[queryFieldName];\n        // If callback function was not set, set it to onElementUpdate() for form\n        // elements and to clearFilter() for <ButtonElement type='reset'/>.\n        if (callbackName === 'onUserInput') {\n          if (elementName === 'ButtonElement' && child.props.type === 'reset') {\n            callbackFunc = this.clearFilter;\n          } else {\n            callbackFunc = this.onElementUpdate.bind(null, elementName);\n          }\n        }\n        // Pass onUserInput and value props to all children\n        formChildren.push(React.cloneElement(child, {\n          onUserInput: callbackFunc,\n          value: filterValue ? filterValue : '',\n          key: key,\n        }));\n        // Initialize filter for StaticDataTable\n        this.setFilter(elementName, child.props.name, filterValue);\n      } else {\n        formChildren.push(React.cloneElement(child, {key: key}));\n      }\n    }.bind(this));\n\n    return formChildren;\n  }\n\n  /**\n   * Appends entry to filter object or deletes it if value is\n   * empty.\n   *\n   * Sets exactMatch to true for all SelectElements (i.e dropdowns)\n   * in order to force StaticDataTable to do exact comparaison\n   *\n   * @param {string} type - form element type (i.e component name)\n   * @param {string} key - the name of the form element\n   * @param {string} value - the value of the form element\n   *\n   * @return {{}} filter - filterData\n   */\n  setFilter(type, key, value) {\n    let filter = {};\n    if (this.props.filter) {\n      filter = JSON.parse(JSON.stringify(this.props.filter));\n    }\n    if (key) {\n      filter[key] = {};\n      if (value) { // all defined/non-null values must have some length, else empty string\n        filter[key].value = Object.keys(value).length > 0 ? value : '';\n      } else { // null and undefined handled here\n        filter[key].value = '';\n      }\n      filter[key].exactMatch = (type === 'SelectElement' || type === 'select');\n    }\n    if (filter && key && value === '') {\n      delete filter[key];\n    }\n    return filter;\n  }\n\n  /**\n   * Sets filter object and querystring to reflect values of input fields\n   *\n   * @param {string} type - form element type (i.e component name)\n   * @param {string} fieldName - the name of the form element\n   * @param {string} fieldValue - the value of the form element\n   */\n  onElementUpdate(type, fieldName, fieldValue) {\n    // Make sure key is of string type and value is of string or object type\n    // before sending them to querystring\n    if (typeof fieldName !== 'string' ||\n        (typeof fieldValue !== 'string' && typeof fieldValue !== 'object')) {\n      return;\n    }\n\n    // Update query string\n    let queryFieldName = (fieldName === 'candID') ? 'candidateID' : fieldName;\n    this.queryString = QueryString.set(this.queryString, queryFieldName, fieldValue);\n\n    // Update filter and get new filter object\n    let filter = this.setFilter(type, fieldName, fieldValue);\n    this.props.onUpdate(filter);\n  }\n\n  render() {\n    // Get formatted children\n    let formChildren = this.getFormChildren();\n    let formElements = this.props.formElements;\n\n    if (formElements) {\n      Object.keys(formElements).forEach(function(fieldName) {\n        let queryFieldName = (fieldName === 'candID') ? 'candidateID' : fieldName;\n        formElements[fieldName].onUserInput = this.onElementUpdate.bind(null, formElements[fieldName].type);\n        formElements[fieldName].value = this.queryString[queryFieldName];\n      }.bind(this));\n    }\n\n    return (\n      <Panel\n        id={this.props.id}\n        height={this.props.height}\n        title={this.props.title}\n      >\n        <FormElement {...this.props}>\n          {formChildren}\n        </FormElement>\n      </Panel>\n    );\n  }\n}\n\nFilterForm.defaultProps = {\n  id: 'selection-filter',\n  height: '100%',\n  title: 'Selection Filter',\n  onUpdate: function() {\n    console.warn('onUpdate() callback is not set!');\n  },\n};\nFilterForm.propTypes = {\n  Module: PropTypes.string.isRequired,\n  filter: PropTypes.object.isRequired,\n  id: PropTypes.string,\n  height: PropTypes.string,\n  title: PropTypes.string,\n  onUpdate: PropTypes.func,\n};\n\nexport default FilterForm;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim\n  };\n\n  ReactPropTypes.checkPropTypes = emptyFunction;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * React ProgressBar.\n *\n * Updates UI automatically when passed a progress value between 0 and 100.\n * To hide progress bar before/after upload, set value to -1.\n *\n * Note: This component relies on Bootstrap 3 progress-bar classes\n * (http://getbootstrap.com/components/#progress)\n */\n\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass ProgressBar extends Component {\n  render() {\n    const progressStyle = {\n      display: (this.props.value < 0 ? 'none' : 'block'),\n      backgroundColor: '#d3d3d3',\n      height: '30px',\n      position: 'relative',\n    };\n\n    const labelStyle = {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      zIndex: 1000,\n      width: '100%',\n      color: '#fff',\n      textAlign: 'center',\n      lineHeight: '30px',\n      fontWeight: '600',\n    };\n\n    return (\n      <div className=\"progress\" style={progressStyle}>\n        <div\n          className=\"progress-bar progress-bar-striped active\"\n          role=\"progressbar\"\n          aria-valuemin=\"0\"\n          aria-valuemax=\"100\"\n          aria-valuenow={this.props.value}\n          style={{width: (this.props.value + '%')}}\n        >\n        </div>\n        <span style={labelStyle}>{this.props.value}%</span>\n      </div>\n    );\n  }\n}\n\nProgressBar.propTypes = {\n  value: PropTypes.number,\n};\nProgressBar.defaultProps = {\n  value: 0,\n};\n\nexport default ProgressBar;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/**\n * This file contains the React component for Loader\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n */\n\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Loader component\n */\nclass Loader extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div\n        className='loader'\n        style={{width: parseInt(this.props.size), height: parseInt(this.props.size)}}\n      />\n    );\n  }\n}\n\nLoader.propTypes = {size: PropTypes.string};\nLoader.defaultProps = {size: '120'};\n\nexport default Loader;\n","/**\n * This file contains React components for Tabs component.\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Tabs Component.\n * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n * and corresponding tab panes.\n *\n * ================================================\n * Usage:\n *\n * 1. Define an array of tabs with IDs and labels\n *\n * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n *\n * 2. Pass tabList as <Tab> property and <TabPane> as child\n *  ```\n * <Tabs tabs={tabList} defaultTab=\"tab1\">\n *   <TabPane TabId={tabList[0].id}>\n *     // Tab content goes here\n *   </TabPane>\n * </Tabs>\n * ```\n * =================================================\n *\n */\nclass Tabs extends Component {\n  constructor(props) {\n    super(props);\n\n    const hash = window.location.hash;\n    let activeTab = '';\n\n    /**\n     * Determine the initial active tab in this order\n     * 1. Try to infer from the URL, otherwise\n     * 2. Try to infer from the defaultTab prop, otherwise\n     * 3. Set to be the first tab of the list\n     */\n    if (this.props.updateURL && hash) {\n      activeTab = hash.substr(1);\n    } else if (this.props.defaultTab) {\n      activeTab = this.props.defaultTab;\n    } else if (this.props.tabs.length > 0) {\n      activeTab = this.props.tabs[0].id;\n    }\n\n    this.state = {\n      activeTab: activeTab,\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.getTabs = this.getTabs.bind(this);\n    this.getTabPanes = this.getTabPanes.bind(this);\n  }\n\n  handleClick(tabId, e) {\n    this.setState({activeTab: tabId});\n    this.props.onTabChange(tabId);\n\n    // Add tab href to URL querystring and scroll the page to top\n    if (this.props.updateURL) {\n      const scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n      window.location.hash = e.target.hash;\n      $('html,body').scrollTop(scrollDistance);\n    }\n  }\n\n  getTabs() {\n    let tabs = (this.props.tabs).map(function(tab) {\n      let tabClass = this.state.activeTab === tab.id ? 'active' : null;\n      let href = '#' + tab.id;\n      let tabID = 'tab-' + tab.id;\n      return (\n        <li\n          role=\"presentation\"\n          className={tabClass}\n          key={tab.id}\n        >\n          <a id={tabID}\n             href={href}\n             role=\"tab\"\n             data-toggle=\"tab\"\n             onClick={this.handleClick.bind(null, tab.id)}\n          >\n            {tab.label}\n          </a>\n        </li>\n      );\n    }.bind(this));\n\n    return tabs;\n  }\n\n  getTabPanes() {\n    let tabPanes = React.Children.map(this.props.children, function(child, key) {\n      if (child) {\n        return React.cloneElement(child, {\n          activeTab: this.state.activeTab,\n          key: key,\n        });\n      }\n    }.bind(this));\n\n    return tabPanes;\n  }\n\n  render() {\n    let tabs = this.getTabs();\n    let tabPanes = this.getTabPanes();\n    let tabStyle = {\n      marginLeft: 0,\n      marginBottom: '5px',\n    };\n\n    return (\n      <div>\n        <ul className=\"nav nav-tabs\" role=\"tablist\" style={tabStyle}>\n          {tabs}\n        </ul>\n        <div className=\"tab-content\">\n          {tabPanes}\n        </div>\n      </div>\n    );\n  }\n}\nTabs.propTypes = {\n  tabs: PropTypes.array.isRequired,\n  defaultTab: PropTypes.string,\n  updateURL: PropTypes.bool,\n};\nTabs.defaultProps = {\n  onTabChange: function() {},\n  // Set updateURL to default to true but allow for change\n  // Nested tabs should set this variable to false\n  updateURL: true,\n};\n\n/**\n * Allows to dynamically render vertical tabs corresponding to tab panes.\n */\n\nclass VerticalTabs extends Component {\n  constructor(props) {\n    super(props);\n\n    const hash = window.location.hash;\n    let activeTab = '';\n\n    /**\n     * Determine the initial active tab in this order\n     * 1. Try to infer from the URL, otherwise\n     * 2. Try to infer from the defaultTab prop, otherwise\n     * 3. Set to be the first tab of the list\n     */\n    if (this.props.updateURL && hash) {\n      activeTab = hash.substr(1);\n    } else if (this.props.defaultTab) {\n      activeTab = this.props.defaultTab;\n    } else if (this.props.tabs.length > 0) {\n      activeTab = this.props.tabs[0].id;\n    }\n\n    this.state = {\n      activeTab: activeTab,\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.getTabs = this.getTabs.bind(this);\n    this.getTabPanes = this.getTabPanes.bind(this);\n  }\n\n  handleClick(tabId, e) {\n    this.setState({activeTab: tabId});\n    this.props.onTabChange(tabId);\n\n    // Add tab href to URL querystring and scroll the page to top\n    if (this.props.updateURL) {\n      const scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n      window.location.hash = e.target.hash;\n      $('html,body').scrollTop(scrollDistance);\n    }\n  }\n\n  getTabs() {\n    let tabs = (this.props.tabs).map(function(tab) {\n      let tabClass = this.state.activeTab === tab.id ? 'active' : null;\n      let href = '#' + tab.id;\n      let tabID = 'tab-' + tab.id;\n      return (\n        <li\n          role=\"presentation\"\n          className={tabClass}\n          key={tab.id}\n        >\n          <a id={tabID}\n             href={href}\n             role=\"tab\"\n             data-toggle=\"tab\"\n             onClick={this.handleClick.bind(null, tab.id)}\n          >\n            {tab.label}\n          </a>\n        </li>\n      );\n    }.bind(this));\n\n    return tabs;\n  }\n\n  getTabPanes() {\n    let tabPanes = React.Children.map(this.props.children, function(child, key) {\n      if (child) {\n        return React.cloneElement(child, {\n          activeTab: this.state.activeTab,\n          key: key,\n        });\n      }\n    }.bind(this));\n\n    return tabPanes;\n  }\n\n  render() {\n    let tabs = this.getTabs();\n    let tabPanes = this.getTabPanes();\n    let tabStyle = {\n      marginLeft: 0,\n      marginBottom: '5px',\n    };\n\n    return (\n      <div>\n        <div className=\"tabbable col-md-3 col-sm-3\">\n          <ul className=\"nav nav-pills nav-stacked\" role=\"tablist\" style={tabStyle}>\n            {tabs}\n          </ul>\n        </div>\n        <div className=\"tab-content col-md-9 col-sm-9\">\n          {tabPanes}\n        </div>\n      </div>\n    );\n  }\n}\nVerticalTabs.propTypes = {\n  tabs: PropTypes.array.isRequired,\n  defaultTab: PropTypes.string,\n  updateURL: PropTypes.bool,\n};\nVerticalTabs.defaultProps = {\n  onTabChange: function() {},\n  // Set updateURL to default to true but allow for change\n  // Nested tabs should set this variable to false\n  updateURL: true,\n};\n\n/*\n * TabPane component.\n * Used to wrap content for every tab.\n */\nclass TabPane extends Component {\n  render() {\n    let classList = 'tab-pane';\n    let title;\n\n    if (this.props.TabId === this.props.activeTab) {\n      classList += ' active';\n    }\n    if (this.props.Title) {\n      title = <h1>{this.props.Title}</h1>;\n    }\n\n    return (\n      <div role=\"tabpanel\" className={classList} id={this.props.TabId}>\n        {title}\n        {this.props.children}\n      </div>\n    );\n  }\n}\nTabPane.propTypes = {\n  TabId: PropTypes.string.isRequired,\n  Title: PropTypes.string,\n  activeTab: PropTypes.string,\n};\n\nexport {\n  Tabs,\n  VerticalTabs,\n  TabPane,\n};\n","/**\n * This file contains React component for Panel\n *\n * @author Alex I.\n * @version 1.0.0\n *\n */\n\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Panel component\n * Wraps children in a collapsible bootstrap panel\n */\nclass Panel extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsed: this.props.initCollapsed,\n    };\n\n    // Initialize panel class based on collapsed status\n    this.panelClass = (\n      this.props.initCollapsed ?\n        'panel-collapse collapse' :\n        'panel-collapse collapse in'\n    );\n\n    this.toggleCollapsed = this.toggleCollapsed.bind(this);\n  }\n\n  toggleCollapsed() {\n    this.setState({collapsed: !this.state.collapsed});\n  }\n\n  render() {\n    // Change arrow direction based on collapse status\n    let glyphClass = (\n      this.state.collapsed ?\n        'glyphicon pull-right glyphicon-chevron-down' :\n        'glyphicon pull-right glyphicon-chevron-up'\n    );\n\n    // Add panel header, if title is set\n    const panelHeading = this.props.title ? (\n      <div\n        className=\"panel-heading\"\n        onClick={this.toggleCollapsed}\n        data-toggle=\"collapse\"\n        data-target={'#' + this.props.id}\n        style={{cursor: 'pointer'}}\n      >\n        {this.props.title}\n        <span className={glyphClass}></span>\n      </div>\n    ) : '';\n\n    return (\n      <div className=\"panel panel-primary\">\n        {panelHeading}\n        <div id={this.props.id} className={this.panelClass} role=\"tabpanel\">\n          <div className=\"panel-body\" style={{height: this.props.height}}>\n            {this.props.children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPanel.propTypes = {\n  id: PropTypes.string,\n  height: PropTypes.string,\n  title: PropTypes.string,\n};\nPanel.defaultProps = {\n  initCollapsed: false,\n  id: 'default-panel',\n  height: '100%',\n};\n\nexport default Panel;\n","/* global ReactDOM */\n\nimport ImagingUploader from './ImagingUploader';\n\n/**\n * Render imaging_uploader on page load\n */\n$(function() {\n  const imagingUploader = (\n    <div className='page-imaging-uploader'>\n      <ImagingUploader\n        Module='imaging_uploader'\n        DataURL={loris.BaseURL + '/imaging_uploader/?format=json'}\n      />\n    </div>\n  );\n\n  ReactDOM.render(imagingUploader, document.getElementById('lorisworkspace'));\n});\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport FilterForm from 'FilterForm';\nimport {Tabs, TabPane} from 'Tabs';\nimport Loader from 'Loader';\n\nimport LogPanel from './LogPanel';\nimport UploadForm from './UploadForm';\n\nclass ImagingUploader extends Component {\n  constructor(props) {\n    super(props);\n    loris.hiddenHeaders = ['PatientName', 'SessionID'];\n\n    this.state = {\n      isLoaded: false,\n      filter: {},\n    };\n\n    /**\n     * Set filter to the element's ref for filtering\n     */\n    this.filter = null;\n    this.setFilterRef = (element) => {\n      this.filter = element;\n    };\n\n    /**\n     * Bind component instance to custom methods\n     */\n    this.fetchData = this.fetchData.bind(this);\n    this.updateFilter = this.updateFilter.bind(this);\n    this.resetFilters = this.resetFilters.bind(this);\n    this.formatColumn = this.formatColumn.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  /**\n   * Retrive data from the provided URL and save it in state\n   * Additionaly add hiddenHeaders to global loris vairable\n   * for easy access by columnFormatter.\n   */\n  fetchData() {\n    $.ajax(this.props.DataURL, {\n      method: 'GET',\n      dataType: 'json',\n      success: (data) => {\n        this.setState({\n          data: data,\n          isLoaded: true,\n        });\n      },\n      error: function(error) {\n        console.error(error);\n      },\n    });\n  }\n\n  /**\n   * Set this.state.filter to the input filter object\n   *\n   * @param {object} filter = the filter object\n   */\n  updateFilter(filter) {\n    this.setState({filter});\n  }\n\n  // TODO: deprecate clearing filters via refs in future refactoring.\n  /**\n   * Reset the filter elements with textInput refs to empty values\n   */\n  resetFilters() {\n    this.filter.clearFilter();\n  }\n\n  /**\n   * Modify behaviour of specified column cells in the Data Table component\n   *\n   * @param {string} column - column name\n   * @param {string} cell - cell content\n   * @param {array} rowData - array of cell contents for a specific row\n   * @param {array} rowHeaders - array of table headers (column names)\n   *\n   * @return {*} a formatted table cell for a given column\n   */\n  formatColumn(column, cell, rowData, rowHeaders) {\n    // If a column if set as hidden, don't display it\n    if (loris.hiddenHeaders.indexOf(column) > -1) {\n      return null;\n    }\n\n    // Create the mapping between rowHeaders and rowData in a row object.\n    let row = {};\n    rowHeaders.forEach((header, index) => {\n      row[header] = rowData[index];\n    }, this);\n\n    // Default cell style\n    const cellStyle = {whiteSpace: 'nowrap'};\n\n    if (column === 'Progress') {\n      if (cell === 'Failure') {\n        cellStyle.color = '#fff';\n        return (\n          <td className=\"label-danger\" style={cellStyle}>\n            {cell}\n          </td>\n        );\n      }\n\n      if (cell === 'In Progress...') {\n        cellStyle.color = '#fff';\n        return (\n          <td className=\"label-warning\" style={cellStyle}>\n            {cell}\n          </td>\n        );\n      }\n\n      if (cell === 'Success') {\n        const created = row['Number Of MINC Created'];\n        const inserted = row['Number Of MINC Inserted'];\n        return (\n          <td style={cellStyle}>\n          {cell} ({inserted} out of {created})\n          </td>\n        );\n      }\n\n      // cell == 'Not started'\n      return (\n          <td style={cellStyle}>{cell}</td>\n      );\n    }\n\n    if (column === 'Tarchive Info') {\n      if (!cell || cell === '0') {\n        return (<td></td>);\n      }\n      const url = loris.BaseURL\n                  + '/dicom_archive/viewDetails/?tarchiveID='\n                  + cell;\n      return (\n        <td style={cellStyle}>\n          <a href={url}>View details</a>\n        </td>\n      );\n    }\n\n    if (column === 'Number Of MINC Inserted') {\n      if (cell > 0) {\n        const url = loris.BaseURL\n                    + '/imaging_browser/viewSession/?sessionID='\n                    + row.SessionID;\n        return (\n          <td style={cellStyle}>\n            <a href={url}>{cell}</a>\n          </td>\n        );\n      }\n    }\n\n    if (column === 'Number Of MINC Created') {\n      let violatedScans;\n      if (row['Number Of MINC Created'] - row['Number Of MINC Inserted'] > 0) {\n        let numViolatedScans =\n             row['Number Of MINC Created'] - row['Number Of MINC Inserted'];\n\n        let patientName = row.PatientName;\n        violatedScans = <a onClick={this.openViolatedScans.bind(null, patientName)}>\n           ({numViolatedScans} violated scans)\n         </a>;\n      }\n\n      return (\n        <td style={cellStyle}>\n          {cell}\n          &nbsp;\n          {violatedScans}\n        </td>\n      );\n    }\n\n    return (<td style={cellStyle}>{cell}</td>);\n  }\n\n  /**\n   * Opens MRI Violations for when there are violated scans\n   *\n   * @param {string} patientName - Patient name of the form PSCID_DCCID_VisitLabel\n   * @param {object} e - event info\n   */\n  openViolatedScans(patientName, e) {\n    loris.loadFilteredMenuClickHandler('mri_violations/', {\n      PatientName: patientName,\n    })(e);\n  }\n\n  render() {\n    if (!this.state.isLoaded) {\n      return <Loader/>;\n    }\n\n    const tabList = [\n      {id: 'browse', label: 'Browse'},\n      {id: 'upload', label: 'Upload'},\n    ];\n\n    return (\n      <Tabs tabs={tabList} defaultTab='browse' updateURL={true}>\n        <TabPane TabId={tabList[0].id}>\n          <div className='row'>\n            <div className='col-md-5'>\n              <FilterForm\n                Module='imaging_uploader'\n                name='imaging_filter'\n                id='imaging_filter'\n                ref={this.setFilterRef}\n                onUpdate={this.updateFilter}\n                filter={this.state.filter}\n              >\n                <TextboxElement {... this.state.data.form.candID} />\n                <TextboxElement {... this.state.data.form.pSCID} />\n                <SelectElement {... this.state.data.form.visitLabel} />\n                <ButtonElement type='reset' label='Clear Filters' onUserInput={this.resetFilters}/>\n              </FilterForm>\n            </div>\n            <div className='col-md-7'>\n              <LogPanel />\n            </div>\n          </div>\n          <div id='mri_upload_table'>\n            <StaticDataTable\n              Data={this.state.data.Data}\n              Headers={this.state.data.Headers}\n              getFormattedCell={this.formatColumn}\n              Filter={this.state.filter}\n              hiddenHeaders={this.state.hiddenHeaders}\n            />\n          </div>\n        </TabPane>\n        <TabPane TabId={tabList[1].id}>\n          <UploadForm\n            form={this.state.data.form}\n            mriList={this.state.data.mriList}\n            maxUploadSize={this.state.data.maxUploadSize}\n            imagingUploaderAutoLaunch={this.state.data.imagingUploaderAutoLaunch}\n          />\n        </TabPane>\n      </Tabs>\n    );\n  }\n}\n\nImagingUploader.propTypes = {\n  DataURL: PropTypes.string.isRequired,\n};\n\nexport default ImagingUploader;\n","/* global UploadProgress */\nimport React, {Component} from 'react';\nimport Panel from 'Panel';\n\n/**\n * Log Panel Component\n *\n * Panel component that displays logs for a selected MRI upload whether it is\n * in progress or already completed or failed.\n *\n * @author Alex Ilea\n * @version 1.0.0\n * @since 2017/04/01\n *\n */\nclass LogPanel extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      logText: '<select a row in the table below to view the upload logs>',\n      logType: 'summary',\n    };\n\n    this.initHelper = this.initHelper.bind(this);\n    this.onLogTypeChange = this.onLogTypeChange.bind(this);\n    this.setServerPolling = this.setServerPolling.bind(this);\n    this.monitorProgress = this.monitorProgress.bind(this);\n  }\n\n  componentDidMount() {\n    this.initHelper();\n  }\n\n  initHelper() {\n    const uploadProgress = new UploadProgress();\n    this.uploadProgress = uploadProgress;\n\n    $('#mri_upload_table').on('click', 'tbody tr', function(event) {\n      // Stop server polling if any was taking place\n      if (uploadProgress.getUploadRow() !== null) {\n        $(uploadProgress.getUploadRow()).css('background-color', 'white');\n        this.setServerPolling(false);\n      }\n\n      // If user clicked on the same row, it is interpreted as a de-selection:\n      // deselect row and set log text to 'nothing selected'\n      if (event.currentTarget === uploadProgress.getUploadRow()) {\n        uploadProgress.setUploadRow(null);\n        uploadProgress.setProgressFromServer(null);\n        this.setState({\n          logText: '<select a row in the table below to view the upload logs>',\n        });\n        return;\n      }\n\n      uploadProgress.setUploadRow(event.currentTarget);\n      $(event.currentTarget).css('background-color', '#EFEFFB');\n      this.monitorProgress(this.state.logType);\n    }.bind(this));\n  }\n\n  /**\n   * Monitors the progress of an MRI pipeline run on the server by repeatedly\n   * issuing POST requests for this information at regular intervals.\n   * As soon as the server indicates that the pipeline has finished running, polling\n   * will end.\n   *\n   * @param {string} logType - summary or details\n   */\n  monitorProgress(logType) {\n    const summary = (logType === 'summary');\n    const uploadProgress = this.uploadProgress;\n    const uploadId = uploadProgress.getUploadId();\n\n    // If no row was selected\n    if (!uploadId) {\n      return;\n    }\n\n    $.post(loris.BaseURL + '/imaging_uploader/ajax/getUploadSummary.php', {\n      uploadId: uploadId,\n      summary: summary,\n    }, function(data) {\n      uploadProgress.setProgressFromServer(data);\n      this.setState({logText: uploadProgress.getProgressText()});\n      // If the pipeline is still running, start polling\n      // If the pipeline is not running, end the polling (if any was started)\n      this.setServerPolling(\n        uploadProgress.getPipelineStatus() === UploadProgress.PIPELINE_STATUS_RUNNING\n      );\n    }.bind(this)); // post call\n  }\n\n  /**\n   * Starts/stops polling on the server.\n   * @param {bool} poll - pool boolean\n   */\n  setServerPolling(poll) {\n    const uploadProgress = this.uploadProgress;\n\n    if (poll) {\n      // START POLLING\n      // If there were no POST requests being issued, start issuing some.\n      if (!this.setServerPolling.getSummaryInterval) {\n        this.setServerPolling.getSummaryInterval = setInterval(\n          this.monitorProgress, 5000\n        );\n      }\n      // If there were no updates to the string of dots, start updating\n      if (!this.setServerPolling.dotUpdateInterval) {\n        this.setServerPolling.dotUpdateInterval = setInterval(() => {\n          uploadProgress.updateDots();\n          this.setState({\n            logText: uploadProgress.getProgressText(),\n          });\n        }, 3000);\n      }\n      // If there were no updates to the animated chars, start updating\n      if (!this.setServerPolling.animatedCharInterval) {\n        this.setServerPolling.animatedCharInterval = setInterval(() => {\n          uploadProgress.updateAnimatedCharIndex();\n          this.setState({\n            logText: uploadProgress.getProgressText(),\n          });\n        }, 250);\n      }\n    } else {\n      // STOP POLLING\n      // Stop issuing POST requests (if any polling was taking place)\n      if (this.setServerPolling.getSummaryInterval) {\n        clearInterval(this.setServerPolling.getSummaryInterval);\n        this.setServerPolling.getSummaryInterval = null;\n      }\n      // Stop updating the series of dots string (if such an update was going on)\n      if (this.setServerPolling.dotUpdateInterval) {\n        clearInterval(this.setServerPolling.dotUpdateInterval);\n        this.setServerPolling.dotUpdateInterval = null;\n      }\n      // Stop updating the animated char (if such an update was going on)\n      if (this.setServerPolling.animatedCharInterval) {\n        clearInterval(this.setServerPolling.animatedCharInterval);\n        this.setServerPolling.animatedCharInterval = null;\n      }\n    }\n  }\n\n  onLogTypeChange(name, value) {\n    // Update log box\n    this.monitorProgress(value);\n    this.setState({logType: value});\n  }\n\n  render() {\n    const logTypes = {\n      summary: 'Summary',\n      detailed: 'Detailed',\n    };\n\n    return (\n      <Panel id='log_panel' title='Log Viewer'>\n        <FormElement name='log_form'>\n          <SelectElement\n            name='LogType'\n            label='Logs to display'\n            options={logTypes}\n            onUserInput={this.onLogTypeChange}\n            value={this.state.logType}\n            emptyOption={false}\n          />\n          <TextareaElement\n            name='UploadLogs'\n            disabled={true}\n            id='mri_upload_logs'\n            value={this.state.logText}\n            rows={6}\n          />\n        </FormElement>\n      </Panel>\n    );\n  }\n}\n\nLogPanel.propTypes = {};\nLogPanel.defaultProps = {};\n\nexport default LogPanel;\n","import ProgressBar from 'ProgressBar';\nimport React, {Component} from 'react';\n\n/**\n * Imaging Upload Form\n *\n * Form component allowing to upload MRI images to LORIS\n *\n * @author Alex Ilea\n * @author Victoria Foing\n * @version 1.0.0\n * @since 2017/04/01\n *\n */\nclass UploadForm extends Component {\n  constructor(props) {\n    super(props);\n\n    const form = JSON.parse(JSON.stringify(this.props.form));\n\n    this.state = {\n      formData: {},\n      form: form,\n      hasError: {},\n      errorMessage: {},\n      uploadProgress: -1,\n    };\n\n    this.onFormChange = this.onFormChange.bind(this);\n    this.getDisabledStatus = this.getDisabledStatus.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n    this.uploadFile = this.uploadFile.bind(this);\n  }\n\n  componentDidMount() {\n    // Disable fields on initial load\n    this.onFormChange(this.state.form.IsPhantom.name, null);\n  }\n\n  /*\n   Updates values in formData\n   Deletes CandID, PSCID, and VisitLabel values if Phantom Scans is set to No\n   */\n  onFormChange(field, value) {\n    if (!field) return;\n\n    const form = JSON.parse(JSON.stringify(this.state.form));\n    const formData = Object.assign({}, this.state.formData);\n\n    if (field === 'IsPhantom') {\n      if (value !== 'N') {\n        delete formData.candID;\n        delete formData.pSCID;\n        delete formData.visitLabel;\n      }\n    }\n\n    formData[field] = value;\n\n    this.setState({\n      form: form,\n      formData: formData,\n    });\n  }\n\n  /*\n   Returns false if Phantom Scans is set to No, and true otherwise\n   Result disables the element that calls the function\n   */\n  getDisabledStatus(phantomScans) {\n    if (phantomScans === 'N') {\n      return false;\n    }\n    return true;\n  }\n\n  submitForm() {\n    // Validate required fields\n    const data = this.state.formData;\n\n    if (!data.mriFile || !data.IsPhantom) {\n      return;\n    }\n\n    const fileName = data.mriFile.name;\n    if (data.IsPhantom === 'N') {\n      if (!data.candID || !data.pSCID || !data.visitLabel) {\n        return;\n      }\n      // Make sure file follows PSCID_CandID_VL[_*].zip|.tgz|.tar.gz format\n      const pcv = data.pSCID + '_' + data.candID + '_' + data.visitLabel;\n      const properName = new RegExp('^' + pcv + '(_|.)');\n      const properExt = new RegExp('.(zip|tgz|tar.gz)$');\n      if (!fileName.match(properName)) {\n        swal({\n          title: 'Filename does not match other fields!',\n          text: 'Filename and values in the PSCID, CandID ' +\n          'and Visit Label fields of the form do not match. Please ' +\n          'verify that the information entered in the ' +\n          'fields or the filename are correct.',\n          type: 'error',\n          confirmButtonText: 'OK',\n        });\n        let fieldMsg = 'Field does not match the filename!';\n\n        let errorMessage = {\n          mriFile: 'Filename does not match other fields!',\n          candID: undefined,\n          pSCID: undefined,\n          visitLabel: undefined,\n        };\n\n        let hasError = {\n          mriFile: true,\n          candID: false,\n          pSCID: false,\n          visitLabel: false,\n        };\n\n        // check filename fields individually to decide\n        // which fields to apply error message\n        // use limit of 2 to avoid splitting the visit label\n        let fileNameParts = fileName.split('_', 2);\n        if (data.pSCID !== fileNameParts[0]) {\n          errorMessage.pSCID = fieldMsg;\n          hasError.pSCID = true;\n        }\n\n        if (data.candID !== fileNameParts[1]) {\n          errorMessage.candID = fieldMsg;\n          hasError.candID = true;\n        }\n\n        // offset for visit label is size of the two parts plus 2 _'s\n        let visitLabelOffset = fileNameParts[0].length + fileNameParts[1].length + 2;\n        let fileNameRemains = fileName.substr(visitLabelOffset);\n        // only check that this part of the filename begins with\n        // the field, last part of file name includes optional\n        // specifiers + file extension\n        if (fileNameRemains.indexOf(data.visitLabel) !== 0) {\n          errorMessage.visitLabel = fieldMsg;\n          hasError.visitLabel = true;\n        }\n\n        this.setState({errorMessage, hasError});\n        return;\n      }\n      if (!fileName.match(properExt)) {\n        swal({\n          title: 'Invalid extension for the uploaded file!',\n          text: 'Filename extension does not match .zip, .tgz or .tar.gz ',\n          type: 'error',\n          confirmButtonText: 'OK',\n        });\n\n        let errorMessage = {\n          mriFile: 'The file ' + fileName + ' is not of type .tgz, .tar.gz or .zip.',\n          candID: undefined,\n          pSCID: undefined,\n          visitLabel: undefined,\n        };\n\n        let hasError = {\n          mriFile: true,\n          candID: false,\n          pSCID: false,\n          visitLabel: false,\n        };\n\n        this.setState({errorMessage, hasError});\n        return;\n      }\n    }\n\n    // Checks if a file with a given fileName has already been uploaded\n    const mriFile = this.props.mriList.find(\n      (mriFile) => mriFile.fileName.indexOf(fileName) > -1\n    );\n\n    // New File\n    if (!mriFile) {\n      this.uploadFile();\n      return;\n    }\n\n    // File uploaded and completed mri pipeline\n    if (mriFile.status === 'Success') {\n      swal({\n        title: 'File already exists!',\n        text: 'A file with this name has already successfully passed the MRI pipeline!\\n',\n        type: 'error',\n        confirmButtonText: 'OK',\n      });\n      return;\n    }\n\n    // File in the middle of insertion pipeline\n    if (mriFile.status === 'In Progress...') {\n      swal({\n        title: 'File is currently processing!',\n        text: 'A file with this name is currently going through the MRI pipeline!\\n',\n        type: 'error',\n        confirmButtonText: 'OK',\n      });\n      return;\n    }\n\n    // File uploaded but failed during mri pipeline\n    if (mriFile.status === 'Failure') {\n      swal({\n        title: 'Are you sure?',\n        text: 'A file with this name already exists!\\n Would you like to override existing file?',\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Yes, I am sure!',\n        cancelButtonText: 'No, cancel it!',\n      }, function(isConfirm) {\n        if (isConfirm) {\n          this.uploadFile(true);\n        } else {\n          swal('Cancelled', 'Your imaginary file is safe :)', 'error');\n        }\n      }.bind(this));\n    }\n\n    // Pipeline has not been triggered yet\n    if (mriFile.status === 'Not Started') {\n      swal({\n        title: 'Are you sure?',\n        text: 'A file with this name has been uploaded but has not yet started the MRI pipeline.' +\n          '\\n Would you like to override the existing file?',\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Yes, I am sure!',\n        cancelButtonText: 'No, cancel it!',\n      }, function(isConfirm) {\n        if (isConfirm) {\n          this.uploadFile(true);\n        } else {\n          swal('Cancelled', 'Your upload has been cancelled.', 'error');\n        }\n      }.bind(this));\n    }\n\n    return;\n  }\n\n  /*\n   Uploads file to the server, listening to the progress\n   in order to get the percentage uploaded as value for the progress bar\n   */\n  uploadFile(overwriteFile) {\n    const formData = this.state.formData;\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== '') {\n        formObj.append(key, formData[key]);\n      }\n    }\n    formObj.append('fire_away', 'Upload');\n    if (overwriteFile) {\n      formObj.append('overwrite', true);\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: loris.BaseURL + '/imaging_uploader/',\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        const xhr = new window.XMLHttpRequest();\n        xhr.upload.addEventListener('progress', function(evt) {\n          if (evt.lengthComputable) {\n            const percentage = Math.round((evt.loaded / evt.total) * 100);\n            this.setState({uploadProgress: percentage});\n          }\n        }.bind(this), false);\n        return xhr;\n      }.bind(this),\n      // Upon successful upload:\n      // - Resets errorMessage and hasError so no errors are displayed on form\n      // - Displays pop up window with success message\n      // - Returns to Browse tab\n      success: (data) => {\n        let errorMessage = this.state.errorMessage;\n        let hasError = this.state.hasError;\n        for (let i in errorMessage) {\n          if (errorMessage.hasOwnProperty(i)) {\n            errorMessage[i] = '';\n            hasError[i] = false;\n          }\n        }\n        this.setState({errorMessage: errorMessage, hasError: hasError});\n        let text = '';\n        if (this.props.imagingUploaderAutoLaunch === 'true' ||\n            this.props.imagingUploaderAutoLaunch === '1'\n        ) {\n          text = 'Processing of this file by the MRI pipeline has started\\n' +\n            'Select this upload in the result table to view the processing progress';\n        }\n        swal({\n          title: 'Upload Successful!',\n          text: text,\n          type: 'success',\n        }, function() {\n          window.location.assign(loris.BaseURL + '/imaging_uploader/');\n        });\n      },\n      // Upon errors in upload:\n      // - Displays pop up window with submission error message\n      // - Updates errorMessage and hasError so relevant errors are displayed on form\n      // - Returns to Upload tab\n      error: (error, textStatus, errorThrown) => {\n        let errorMessage = Object.assign({}, this.state.errorMessage);\n        let hasError = this.state.hasError;\n        let messageToPrint = '';\n        errorMessage = (error.responseJSON || {}).errors || 'Submission error!';\n        for (let i in errorMessage) {\n          if (errorMessage.hasOwnProperty(i)) {\n            errorMessage[i] = errorMessage[i].toString();\n            if (errorMessage[i].length) {\n              hasError[i] = true;\n              messageToPrint += errorMessage[i] + '\\n';\n            } else {\n              hasError[i] = false;\n            }\n          }\n        }\n        swal({\n          title: 'Submission error!',\n          text: messageToPrint,\n          type: 'error',\n        });\n        this.setState({uploadProgress: -1, errorMessage: errorMessage, hasError: hasError});\n      },\n    });\n  }\n\n  render() {\n    // Bind form elements to formData\n    const form = this.state.form;\n    form.IsPhantom.value = this.state.formData.IsPhantom;\n    form.candID.value = this.state.formData.candID;\n    form.pSCID.value = this.state.formData.pSCID;\n    form.visitLabel.value = this.state.formData.visitLabel;\n    form.mriFile.value = this.state.formData.mriFile;\n\n    // Hide button when progress bar is shown\n    const btnClass = (\n      (this.state.uploadProgress > -1) ? 'btn btn-primary hide' : undefined\n    );\n\n    const notes = (\n        <span>\n          File cannot exceed {this.props.maxUploadSize}<br/>\n          File must be of type .tgz or tar.gz or .zip<br/>\n          For files that are not Phantom Scans, file name must begin with\n          <b> [PSCID]_[CandID]_[Visit Label]</b><br/>\n          For example, for CandID <i>100000</i>, PSCID <i>ABC123</i>, and\n          Visit Label <i>V1</i> the file name should be prefixed by:\n          <b> ABC123_100000_V1</b><br/>\n        </span>\n    );\n\n    // Returns individual form elements\n    // For CandID, PSCID, and Visit Label, disabled and required\n    // are updated depending on Phantom Scan value\n    // For all elements, hasError and errorMessage\n    // are updated depending on what values are submitted\n    return (\n      <div className='row'>\n        <div className='col-md-7'>\n          <h3>Upload an imaging scan</h3>\n          <br/>\n          <FormElement\n            name='upload_form'\n            fileUpload={true}\n          >\n            <SelectElement\n              name='IsPhantom'\n              label='Phantom Scans'\n              options={this.props.form.IsPhantom.options}\n              onUserInput={this.onFormChange}\n              required={true}\n              hasError={this.state.hasError.IsPhantom}\n              errorMessage={this.state.errorMessage.IsPhantom}\n              value={this.state.formData.IsPhantom}\n            />\n            <TextboxElement\n              name='candID'\n              label='CandID'\n              onUserInput={this.onFormChange}\n              disabled={this.getDisabledStatus(this.state.formData.IsPhantom)}\n              required={!this.getDisabledStatus(this.state.formData.IsPhantom)}\n              hasError={this.state.hasError.candID}\n              errorMessage={this.state.errorMessage.candID}\n              value={this.state.formData.candID}\n            />\n            <TextboxElement\n              name='pSCID'\n              label='PSCID'\n              onUserInput={this.onFormChange}\n              disabled={this.getDisabledStatus(this.state.formData.IsPhantom)}\n              required={!this.getDisabledStatus(this.state.formData.IsPhantom)}\n              hasError={this.state.hasError.pSCID}\n              errorMessage={this.state.errorMessage.pSCID}\n              value={this.state.formData.pSCID}\n            />\n            <SelectElement\n              name='visitLabel'\n              label='Visit Label'\n              options={this.props.form.visitLabel.options}\n              onUserInput={this.onFormChange}\n              disabled={this.getDisabledStatus(this.state.formData.IsPhantom)}\n              required={!this.getDisabledStatus(this.state.formData.IsPhantom)}\n              hasError={this.state.hasError.visitLabel}\n              errorMessage={this.state.errorMessage.visitLabel}\n              value={this.state.formData.visitLabel}\n            />\n            <FileElement\n              name='mriFile'\n              label='File to Upload'\n              onUserInput={this.onFormChange}\n              required={true}\n              hasError={this.state.hasError.mriFile}\n              errorMessage={this.state.errorMessage.mriFile}\n              value={this.state.formData.mriFile}\n            />\n            <StaticElement\n              label='Notes'\n              text={notes}\n            />\n            <div className='row'>\n              <div className='col-sm-9 col-sm-offset-3'>\n                <ProgressBar value={this.state.uploadProgress}/>\n              </div>\n            </div>\n            <ButtonElement\n              onUserInput={this.submitForm}\n              buttonClass={btnClass}\n            />\n          </FormElement>\n        </div>\n      </div>\n    );\n  }\n}\n\nUploadForm.propTypes = {};\nUploadForm.defaultProps = {};\n\nexport default UploadForm;\n"],"sourceRoot":""}