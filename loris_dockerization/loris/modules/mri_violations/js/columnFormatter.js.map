{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./modules/mri_violations/jsx/columnFormatter.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","formatColumn","column","cell","rowData","rowHeaders","loris","row","header","index","resolutionStatusStyle","resolutionStatus","fontColor","color","patientname","PatientName","uid","SeriesUID","React","createElement","className","style","href","onClick","window"],"mappings":"mBACA,IAAAA,oBAGA,SAAAC,oBAAAC,UAGA,GAAAF,iBAAAE,UAAA,CACA,OAAAF,iBAAAE,UAAAC,QAGA,IAAAC,OAAAJ,iBAAAE,WACAG,EAAAH,SACAI,EAAA,MACAH,YAIAI,QAAAL,UAAAM,KAAAJ,OAAAD,QAAAC,cAAAD,QAAAF,qBAGAG,OAAAE,EAAA,KAGA,OAAAF,OAAAD,QAKAF,oBAAAQ,EAAAF,QAGAN,oBAAAS,EAAAV,iBAGAC,oBAAAU,EAAA,SAAAR,QAAAS,KAAAC,QACA,IAAAZ,oBAAAa,EAAAX,QAAAS,MAAA,CACAG,OAAAC,eAAAb,QAAAS,MAA0CK,WAAA,KAAAC,IAAAL,WAK1CZ,oBAAAkB,EAAA,SAAAhB,SACA,UAAAiB,SAAA,aAAAA,OAAAC,YAAA,CACAN,OAAAC,eAAAb,QAAAiB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAb,QAAA,cAAiDmB,MAAA,QAQjDrB,oBAAAsB,EAAA,SAAAD,MAAAE,MACA,GAAAA,KAAA,EAAAF,MAAArB,oBAAAqB,OACA,GAAAE,KAAA,SAAAF,MACA,GAAAE,KAAA,UAAAF,QAAA,UAAAA,aAAAG,WAAA,OAAAH,MACA,IAAAI,GAAAX,OAAAY,OAAA,MACA1B,oBAAAkB,EAAAO,IACAX,OAAAC,eAAAU,GAAA,WAAyCT,WAAA,KAAAK,QACzC,GAAAE,KAAA,UAAAF,OAAA,iBAAAM,OAAAN,MAAArB,oBAAAU,EAAAe,GAAAE,IAAA,SAAAA,KAAgH,OAAAN,MAAAM,MAAqBC,KAAA,KAAAD,MACrI,OAAAF,IAIAzB,oBAAA6B,EAAA,SAAA1B,QACA,IAAAS,OAAAT,eAAAqB,WACA,SAAAM,aAA2B,OAAA3B,OAAA,YAC3B,SAAA4B,mBAAiC,OAAA5B,QACjCH,oBAAAU,EAAAE,OAAA,IAAAA,QACA,OAAAA,QAIAZ,oBAAAa,EAAA,SAAAmB,OAAAC,UAAsD,OAAAnB,OAAAoB,UAAAC,eAAA5B,KAAAyB,OAAAC,WAGtDjC,oBAAAoC,EAAA,GAIA,OAAApC,wCAAAqC,EAAA,6HCxEA,SAAAC,aAAAC,OAAAC,KAAAC,QAAAC,YACE,GAAIC,qCAAJ,EAA8C,CAC5C,YAGF,IAAIC,OACJF,mBAAmB,SAAAG,OAAAC,OACjBF,YAAcH,QAAdG,QADFF,MAGA,IAAIK,2BAAJ,EACA,IAAIC,sBAAJ,EACA,IAAIC,WAAaC,MAAjB,WACA,IAAIC,YAAcP,IAAlBQ,YACA,IAAIC,IAAMT,IAAVU,UAEA,GAAIf,SAAJ,oBAAoC,CAClC,OAAQK,IAAR,sBACE,iBACEG,qCACAC,8BACA,MAEF,YACED,sCACAC,yBACA,MAEF,cACED,mCACAC,wCACA,MAEF,eACED,qCACAC,4BACA,MAEF,eACED,sCACAC,4BACA,MAEF,YACED,sCACAC,yBACA,MAEF,oBACED,sCACAC,sCACA,MAKJ,OACQO,MAAAC,cAAA,MAAIC,UAAJV,sBAAuCW,MAAvCT,WACKD,kBAIf,GAAIT,oBAAwBK,cAA5B,qBAAkE,CAChE,OACQW,MAAAC,cAAA,UACID,MAAAC,cAAA,KAAGG,KAAH,IACGC,QAASjB,mFAEJS,YAADD,YACCG,UAJRD,OAAA,uBASd,GAAId,oBAAwBK,cAA5B,+BAA4E,CAC1E,OACOW,MAAAC,cAAA,UACID,MAAAC,cAAA,KAAGG,KAAH,IACGC,QAASjB,6EAEJS,YAADD,YACCG,UAJRD,OAAA,iCASb,OAAQE,MAAAC,cAAA,UAAKhB,MAGfqB,iDAEevB","file":"./modules/mri_violations/js/columnFormatter.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 68);\n","/* exported formatColumn */\n\n/**\n * Modify behaviour of specified column cells in the Data Table component\n * @param {string} column - column name\n * @param {string} cell - cell content\n * @param {array} rowData - array of cell contents for a specific row\n * @param {array} rowHeaders - array of table headers (column names)\n * @return {*} a formated table cell for a given column\n */\nfunction formatColumn(column, cell, rowData, rowHeaders) {\n  if (loris.hiddenHeaders.indexOf(column) > -1) {\n    return null;\n  }\n  // Create the mapping between rowHeaders and rowData in a row object.\n  let row = {};\n  rowHeaders.forEach(function(header, index) {\n    row[header] = rowData[index];\n  }, this);\n  let resolutionStatusStyle;\n  let resolutionStatus;\n  let fontColor = {color: '#FFFFFF'};\n  let patientname = row.PatientName;\n  let uid = row.SeriesUID;\n\n  if (column === 'Resolution Status') {\n    switch (row['Resolution Status']) {\n      case 'unresolved':\n        resolutionStatusStyle = 'label-danger';\n        resolutionStatus = 'Unresolved';\n        break;\n\n      case 'reran':\n        resolutionStatusStyle = 'label-success';\n        resolutionStatus = 'Reran';\n        break;\n\n      case 'emailed':\n        resolutionStatusStyle = 'label-info';\n        resolutionStatus = 'Emailed site/pending';\n        break;\n\n      case 'rejected':\n        resolutionStatusStyle = 'label-danger';\n        resolutionStatus = 'Rejected';\n        break;\n\n      case 'inserted':\n        resolutionStatusStyle = 'label-warning';\n        resolutionStatus = 'Inserted';\n        break;\n\n      case 'other':\n        resolutionStatusStyle = 'label-primary';\n        resolutionStatus = 'Other';\n        break;\n\n      case 'inserted_flag':\n        resolutionStatusStyle = 'label-default';\n        resolutionStatus = 'Inserted with flag';\n        break;\n\n           /* no default */\n    }\n\n    return (\n            <td className= {resolutionStatusStyle} style={fontColor}>\n                {resolutionStatus}\n            </td>\n           );\n  }\n  if (column === 'Problem' && row.Problem === 'Protocol Violation') {\n    return (\n            <td>\n                <a href= \"#\"\n                   onClick={loris.loadFilteredMenuClickHandler(\n                       'mri_violations/mri_protocol_check_violations',\n                       {PatientName: patientname,\n                        SeriesUID: uid}\n                   )}>Protocol Violation</a>\n            </td>\n           );\n  }\n  if (column === 'Problem' && row.Problem === 'Could not identify scan type') {\n    return (\n           <td>\n               <a href= \"#\"\n                  onClick={loris.loadFilteredMenuClickHandler(\n                      'mri_violations/mri_protocol_violations',\n                      {PatientName: patientname,\n                       SeriesUID: uid}\n                  )}>Could not identify scan type</a>\n           </td>\n           );\n  }\n  return (<td>{cell}</td>);\n}\n\nwindow.formatColumn = formatColumn;\n\nexport default formatColumn;\n"],"sourceRoot":""}